/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MibG12;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 * Klaas för att kunna visa info om en agent 
 * @author 
 */
public class VisaInfoOmAgent extends javax.swing.JFrame {

  private static InfDB idb;
  private String nuvarandeAgent;
  private String nuvarandeUtomjording; 
  private boolean anvandareArAdmin;
  private boolean anvandareArAlien;
    
    /**
     * Konstruktor för VisaInfoOmAgent
     */
    public VisaInfoOmAgent(InfDB idb, String nuvarandeAgent, boolean anvandareArAdmin, String nuvarandeUtomjording,boolean anvandareArAlien) {
        initComponents();
        this.idb = idb;
        this.nuvarandeAgent = nuvarandeAgent;
        this.anvandareArAdmin = anvandareArAdmin;
        this.nuvarandeUtomjording = nuvarandeUtomjording;
        this.anvandareArAlien = anvandareArAlien;
        btnTillbakaTillHM.setVisible(false);
    }

    VisaInfoOmAgent(MibG12.Startklass idb) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBetackningRubrik = new javax.swing.JLabel();
        lblTelefonRubrik = new javax.swing.JLabel();
        lblAdminstatusRubrik = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblAnstallningsDatumRubrik = new javax.swing.JLabel();
        lblOmradeRubrik = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblAgentNamn = new javax.swing.JLabel();
        lblAgentTelefon = new javax.swing.JLabel();
        lblAdminStatus = new javax.swing.JLabel();
        lblAnstallningsDatum = new javax.swing.JLabel();
        lblOmrade = new javax.swing.JLabel();
        lblLosenordRubrik = new javax.swing.JLabel();
        lblLosenord = new javax.swing.JLabel();
        btnTillbakaTillHM = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblBetackningRubrik.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBetackningRubrik.setText("Betäckning:");

        lblTelefonRubrik.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTelefonRubrik.setText("Telefon:");

        lblAdminstatusRubrik.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAdminstatusRubrik.setText("Adminstatus:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Agent information");

        lblAnstallningsDatumRubrik.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAnstallningsDatumRubrik.setText("Anställningsdatum:");

        lblOmradeRubrik.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblOmradeRubrik.setText("Område:");

        jButton1.setText("Tillbaka");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblAgentNamn.setText("Namn");

        lblAgentTelefon.setText("Telefonummer");

        lblAdminStatus.setText("Adminstatus");

        lblAnstallningsDatum.setText("Anställningsdatum");

        lblOmrade.setText("Område");

        lblLosenordRubrik.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLosenordRubrik.setText("Lösenord:");

        btnTillbakaTillHM.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        btnTillbakaTillHM.setText("Tillbaka till huvudmeny");
        btnTillbakaTillHM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaTillHMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTelefonRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(lblAgentTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAdminstatusRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(lblAdminStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAnstallningsDatumRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOmradeRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLosenordRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAnstallningsDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLosenord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblBetackningRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(lblAgentNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnTillbakaTillHM)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(lblAdminstatusRubrik)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAnstallningsDatumRubrik)
                            .addComponent(lblAnstallningsDatum)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBetackningRubrik)
                            .addComponent(lblAgentNamn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTelefonRubrik)
                            .addComponent(lblAgentTelefon))
                        .addGap(18, 18, 18)
                        .addComponent(lblAdminStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOmradeRubrik)
                    .addComponent(lblOmrade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLosenordRubrik)
                    .addComponent(lblLosenord, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTillbakaTillHM, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(114, 114, 114))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Metod för att se Om användare är admin, isåfall sätts den till true
    public void setAnvandareArAdmin ()
    {
        anvandareArAdmin = true;
    }
 //Metod för att se Om användare är admin, ifall det är en utomjording som ser info sätts den till false   
    public void setHuvudMenyUtomjording ()
    {
        
        anvandareArAdmin = false;
    }
 // Metod för att gå tillbaka till hvudmenyadmin om användaren är admin, annars tillbaka till utomjording   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (anvandareArAdmin == true)
        {
        HuvudMenyAdmin hMA = new HuvudMenyAdmin(idb, nuvarandeAgent);
        hMA.setVisible(true);
        dispose();
        }
        
        else
        {
            HuvudMenyUtomjording hMU = new HuvudMenyUtomjording(idb, nuvarandeUtomjording);
            hMU.setNuvarandeUtomjording(nuvarandeUtomjording);
            hMU.setVisible(true);
            hMU.setValkommenUtomjording();
            dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
//Knapp för att gå tillbaka till huvudmenyadmin eller utomjording beroende på vem som är inloggad
    private void btnTillbakaTillHMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaTillHMActionPerformed
       
        if(anvandareArAlien == false){
        HuvudMenyAdmin hMA = new HuvudMenyAdmin (idb, nuvarandeAgent);
        hMA.setVisible(true);
        dispose();}
        else
        {
            new HuvudMenyUtomjording(idb,nuvarandeUtomjording).setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_btnTillbakaTillHMActionPerformed
//Metod för att sätta nuvarande agent
    public void setNuvarandeAgent (String nuvarandeAgent)
    {
        this.nuvarandeAgent = nuvarandeAgent;
    }
//Metod för att sätta nuvarande utomjording
    public void setNuvarandeUtomjording (String nuvarandeUtomjording)
    {
        this.nuvarandeUtomjording = nuvarandeUtomjording;
        anvandareArAlien = true;
    }
//Metod för att visa info, visar olika info beroende på om användaren är utomjording eller admin          
    public void setInfo (String namn)
    {
        
        if(anvandareArAlien == true){
       lblAgentNamn.setText(visaNamn(namn));
       lblAnstallningsDatum.setText(visaAnstallningsDatum(namn));
       lblOmrade.setText(visaPlats(namn));
       lblAgentTelefon.setText(visaTelefon(namn));
       lblAdminStatus.setText(visaAdminStatus(namn));
        }
        else{
       lblAgentNamn.setText(visaNamn(namn));
       lblAnstallningsDatum.setText(visaAnstallningsDatum(namn));
       lblOmrade.setText(visaPlats(namn));
       lblAgentTelefon.setText(visaTelefon(namn));
       lblLosenord.setText(visaLosenord(namn));
       lblAdminStatus.setText(visaAdminStatus(namn));   
        }
    }
//Metod för att visa namn på en viss agent    
    public String visaNamn (String namn)
    {
        String namnet = "";
        
        try {
        String fraga = "Select namn from agent where namn = '" + namn + "'";
        String svar = idb.fetchSingle(fraga);
        namnet = Validering.storForstaOchSistaBokstav(svar);
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return namnet;
    }
 //Metod för att visa anstälningsdatum   
    public String visaAnstallningsDatum (String namn)
    {
        String regDatum = "";
        
        try {
        String fraga = "Select anstallningsdatum from agent where namn = '" + namn + "'";
        String svar = idb.fetchSingle(fraga);
        regDatum = svar;
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return regDatum;
    }
//Metod för att visa vilket område en agent är tillsatt    
    public String visaPlats (String namn)
    {
        String plats = "";
        
        try {
        String fraga = "Select benamning from omrade where omrades_id = (Select omrade from agent where namn = '" + namn + "')";
        String svar = idb.fetchSingle(fraga);
        plats = Validering.storForstaBokstav(svar);
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return plats;
    }
//Metod för att visa telefon nummer för en agent    
    public String visaTelefon (String namn)
    {
        String telefon = "";
        
        try {
        String fraga = "Select telefon from agent where namn = '" + namn + "'";
        String svar = idb.fetchSingle(fraga);
        telefon = svar;
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return telefon;
    }
//Metod för att visa lösenord för en agent    
    public String visaLosenord (String namn)
    {
        String losenord = "";
        
        try {
        String fraga = "Select losenord from agent where namn = '" + namn + "'";
        String svar = idb.fetchSingle(fraga);
        losenord = svar;
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return losenord;
    }
 //Metod för att visa id för en agent   
    public String visaID (String namn)
    {
        String iD = "";
        
        try {
        String fraga = "Select agent_id from agent where namn = '" + namn + "'";
        String svar = idb.fetchSingle(fraga);
        iD = svar;
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return iD;
    }
//Metod för att visa ansvarig agent    
    public String visaAnsvarigAgent (String namn)
    {
        String agent = "";
        
        try {
        String fraga = "Select namn from agent where agent_id = (Select Ansvarig_Agent from alien where namn = '" + namn + "')";
        String svar = idb.fetchSingle(fraga);
        agent = Validering.storForstaOchSistaBokstav(svar);
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return agent;
    }
//Metod för att visa adminstatus för en agent    
    public String visaAdminStatus (String status)
    {
      String adminStatus = "";
        
        try {
        String fraga = "Select administrator from agent where namn = '" + nuvarandeAgent + "'";
        String svar = idb.fetchSingle(fraga);
        
        adminStatus = Validering.setAdminStatus(svar);
        }
        
        catch (InfException ex) {
            Logger.getLogger(InloggningsTyp.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Ett fel har uppstått " + ex);
        }
        
        return adminStatus;  
    }
 //Metod som visar tillbaka till huvudmeny knappen   
    public void visaTillbakaTillHMknapp()
    {
        btnTillbakaTillHM.setVisible(true);
    }
    
    
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTillbakaTillHM;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblAdminStatus;
    private javax.swing.JLabel lblAdminstatusRubrik;
    private javax.swing.JLabel lblAgentNamn;
    private javax.swing.JLabel lblAgentTelefon;
    private javax.swing.JLabel lblAnstallningsDatum;
    private javax.swing.JLabel lblAnstallningsDatumRubrik;
    private javax.swing.JLabel lblBetackningRubrik;
    private javax.swing.JLabel lblLosenord;
    private javax.swing.JLabel lblLosenordRubrik;
    private javax.swing.JLabel lblOmrade;
    private javax.swing.JLabel lblOmradeRubrik;
    private javax.swing.JLabel lblTelefonRubrik;
    // End of variables declaration//GEN-END:variables
}
