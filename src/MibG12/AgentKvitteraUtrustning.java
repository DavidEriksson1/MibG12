/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MibG12;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
/**
 *JFrame klass som tillåter en agent att kvittera ut ny utrustning.
 * 
 */
public class AgentKvitteraUtrustning extends javax.swing.JFrame {
    
    private InfDB idb;
    private String nuvarandeAgent;

    /**
     * Creates new form AgnetKvitteraUtrusning
     */
    public AgentKvitteraUtrustning(InfDB idb, String nuvarandeAgent) {
        initComponents();
        this.idb = idb;
        this.nuvarandeAgent = nuvarandeAgent;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListUtr = new javax.swing.JList<>();
        cbTyp = new javax.swing.JComboBox<>();
        btnLana = new javax.swing.JButton();
        txtDatum = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnTillbaka = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jListUtr);

        cbTyp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj:", "Vapen", "Kommunikation", "Teknik" }));
        cbTyp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTypActionPerformed(evt);
            }
        });

        btnLana.setText("Låna utrustning");
        btnLana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLanaActionPerformed(evt);
            }
        });

        txtDatum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDatumActionPerformed(evt);
            }
        });

        jLabel1.setText("Utkvitteringsdatum:");

        jLabel2.setText("YYYY-MM-DD");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Välj en utrustning du vill kvittera ut");

        jLabel4.setText("Utrustningstyp:");

        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDatum)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbTyp, javax.swing.GroupLayout.Alignment.LEADING, 0, 129, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnTillbaka, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(btnLana, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(cbTyp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLana)
                    .addComponent(btnTillbaka))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLanaActionPerformed
        
        /**
         * Metod som kvitterar ut en utrustning som inte redan är utkvitterad.
         */
        
        String utrAttLana = jListUtr.getSelectedValue();
        String fragaUtrID = "Select utrustnings_id from utrustning where benamning ='" + utrAttLana + "'";
        String fragaAgentID = "Select agent_id from agent where namn = '" + nuvarandeAgent + "'";
        String datum = txtDatum.getText();

        try {
            String svarUtrID = idb.fetchSingle(fragaUtrID);
            String svarAgentID = idb.fetchSingle(fragaAgentID);
            String insert = "insert into innehar_utrustning values (" + svarAgentID + "," + svarUtrID + ",'" + datum + "')";
            boolean vapenValt = jListUtr.isSelectionEmpty();
            
            if (vapenValt == false) {
                boolean datumKorrekt = Validering.kollaDatumFormat(datum);

                if (datumKorrekt == true) 
                {
                    boolean utrRedanUtlanad = kollaUtlaning(svarUtrID);

                    if (utrRedanUtlanad == false) 
                    {
                        idb.fetchSingle(insert);
                        JOptionPane.showMessageDialog(null, utrAttLana + " har blivit utkvitterad!");
                        cbTyp.setSelectedIndex(0);
                        txtDatum.setText("");
                    }
                }

            } else {
                JOptionPane.showMessageDialog(null, "Ingen utrustning vald, vänligen välj en utrustning från listan att låna!");
            }
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
            
    }//GEN-LAST:event_btnLanaActionPerformed

    private void cbTypActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTypActionPerformed
        
        // Combobox med alternativ över vad admin kan göra med alien-tabellen
        DefaultListModel listModel = new DefaultListModel();
        jListUtr.setModel(listModel);
        int i = cbTyp.getSelectedIndex();

        try {
        if (i == 1) 
        {
            String fraga = "Select benamning from utrustning where utrustnings_id in (Select utrustnings_id from vapen)";
            ArrayList<String> vapen = idb.fetchColumn(fraga); 
            
            for (String vapnen : vapen)
            {
                listModel.addElement(vapnen);
            }
        }

        if (i == 2) 
        {
            String fraga = "Select benamning from utrustning where utrustnings_id in (Select utrustnings_id from kommunikation)";
            ArrayList<String> kommunikation = idb.fetchColumn(fraga); 
            
            for (String kom : kommunikation)
            {
                listModel.addElement(kom);
            }
            
        } 
        if (i == 3) 
        {
            String fraga = "Select benamning from utrustning where utrustnings_id in (Select utrustnings_id from teknik)";
            ArrayList<String> teknik = idb.fetchColumn(fraga); 
            
            for (String tekniken : teknik)
            {
                listModel.addElement(tekniken);
            }

        }
        }
        catch (InfException ex)
        {
            JOptionPane.showMessageDialog(null, "Databasfel");
        }
        
    }//GEN-LAST:event_cbTypActionPerformed

    private void txtDatumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDatumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDatumActionPerformed

    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
 /**
 * Tillbakaknapp till agent huvudmeny.
 * 
 */            
        HuvudMenyAgent hMA = new HuvudMenyAgent (idb, nuvarandeAgent);
        hMA.setHuvudText(nuvarandeAgent);
        hMA.setVisible(true);
        dispose();
        
    }//GEN-LAST:event_btnTillbakaActionPerformed
 /**
 * Metod som kollar om den valda utrustningen just nu är utlånad eller inte.
 * 
 */ 
   public boolean kollaUtlaning (String id)
   {
       boolean utrUtlanad = false;
       
       try {
       String fraga = "Select utrustnings_id from innehar_utrustning";
       ArrayList<String> utrID = idb.fetchColumn(fraga);
       
       for (String idet : utrID)
       {
           if (idet.equals(id))
           {
               utrUtlanad = true;
               break;
           }
       } 
          
       }
       catch (InfException ex)
       {
           JOptionPane.showMessageDialog(null, "Databasfel");
       }
       if (utrUtlanad == true)
       {
           JOptionPane.showMessageDialog(null, "Utrustningen är redan utlånad, vänligen välj en annan utrustning att låna!");
       }
       
       return utrUtlanad;
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLana;
    private javax.swing.JButton btnTillbaka;
    private javax.swing.JComboBox<String> cbTyp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListUtr;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txtDatum;
    // End of variables declaration//GEN-END:variables
}
